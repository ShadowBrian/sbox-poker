@using Sandbox.UI;
@using System;
@namespace Poker.UI

<root class="betting @VisibilityClass()">

	@if ( Input.UsingController )
	{
		// Display controls in a wheel
		
		<plabel class="selected-action @HoverClass()">@HoverText()</plabel>

		<radialmenu class="radial-wheel" @ref="RadialWheel">
			<radialmenuitem @onclick=@Raise name="Raise" icon="circle-arrow-up" action="raise">
			</RadialMenuItem>

			<radialmenuitem @onclick=@Fold name="Fold" icon="circle-xmark" action="fold">
			</radialmenuitem>

			<radialmenuitem @onclick=@Check name="Check" icon="circle-check" action="check">
			</radialmenuitem>
		</radialmenu>		
	}
	else
	{
		// Display controls in a row

		<div class="row gradient-bottom">

			<inputhint btn="raise">Raise</inputhint>
			<inputhint btn="fold">Fold</inputhint>
			<inputhint btn="check">Check</inputhint>
			
		</div>
	}

</root>

@code
{
	public RadialMenu RadialWheel { get; set; }

	private bool WasMyTurn { get; set; }
	private TimeUntil TimeUntilTurnEnds { get; set; }

	private Player Player => Game.LocalPawn as Player;

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Tick);
	}

	string HoverText()
	{
		return RadialWheel?.HoverText ?? "NONE";
	}

	string HoverClass()
	{
		if (RadialWheel?.IsActive ?? false)
			return "visible";

		return "";
	}

	string VisibilityClass()
	{
		if (Player != null && Player.IsMyTurn)
			return "visible";

		return "";
	}

	void Raise()
	{
		if (Player == null)
			return;

		throw new NotImplementedException();
	}

	void Check()
	{
		if (Player == null)
			return;

		Player.Check();
	}

	void Fold()
	{
		if (Player == null)
			return;

		Player.Fold();
	}

	public override void Tick()
	{
		base.Tick();
		if (Player == null)
			return;

		if (!WasMyTurn && Player.IsMyTurn)
			TimeUntilTurnEnds = 30f;

		float t = ( TimeUntilTurnEnds / 30f ) * 100f;
		t = t.UnsignedMod( 99 );

		WasMyTurn = Player.IsMyTurn;
	}

	public override void DrawBackground(ref RenderState state)
	{
		base.DrawBackground(ref state);

		if (RadialWheel == null)
			return;

		float t = ( TimeUntilTurnEnds / 30f ) * 360f;
		t = t.UnsignedMod( 360 );

		float radius = 220f * 0.5f * ScaleToScreen;
		float borderWidth = 2f;

		GraphicsX.Circle(RadialWheel.Box.Rect.Center, radius, radius - borderWidth, Color.White, 64, 0, t);
	}
}
