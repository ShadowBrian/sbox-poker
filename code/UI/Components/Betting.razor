@using Sandbox.UI;
@using System;
@namespace Poker.UI

<root class="betting @VisibilityClass()">
	
	<cardranking></cardranking>
		
	<div class="raise gradient-bottom">
			
		<row>
			<slider MinValue="@BetMin" MaxValue="@BetMax" Value="@BetValue" @ref=BetSlider></slider>
				
			<label class="bet-text">$@BetSlider.Value</label>
				
			<inputhint btn="raise_dec"></inputhint>				
			<inputhint btn="raise_inc"></inputhint>
		</row>

		<row>
			<inputhint btn="raise">@MoveName</inputhint>
			<inputhint btn="fold">Fold</inputhint>
		</row>
			
	</div>

</root>

@code
{
	private Slider BetSlider { get; set; }
	private float BetValue { get; set; }
	private TimeSince TimeSinceLastBetIncrement { get; set; }
	public RadialMenu RadialWheel { get; set; }

	private int BetMin => PokerGame.Instance.MinimumBet.CeilToInt();
	private int BetMax => Player.Money.CeilToInt();

	private string MoveName => ( BetValue == BetMax ? "All In" : ( BetValue == BetMin ? "Check" : "Raise" ) );

	private bool WasMyTurn { get; set; }
	private TimeUntil TimeUntilTurnEnds { get; set; }

	private Player Player => Game.LocalPawn as Player;

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Tick);
	}

	string HoverText()
	{
		return RadialWheel?.HoverText ?? "NONE";
	}

	string HoverClass()
	{
		if (RadialWheel?.IsActive ?? false)
			return "visible";

		return "";
	}

	string VisibilityClass()
	{
		if (Player != null && Player.IsMyTurn)
			return "visible";

		return "";
	}

	void Raise()
	{
		if (Player == null)
			return;

		Player.Raise(BetValue);
	}

	void Check()
	{
		if (Player == null)
			return;

		Player.Check();
	}

	void Fold()
	{
		if (Player == null)
			return;

		Player.Fold();
	}

	public override void Tick()
	{
		base.Tick();
		if (Player == null)
			return;

		if (!WasMyTurn && Player.IsMyTurn)
		{
			BetValue = BetMin;
			TimeUntilTurnEnds = 30f;
		}

		float t = ( TimeUntilTurnEnds / 30f ) * 100f;
		t = t.UnsignedMod( 99 );

		WasMyTurn = Player.IsMyTurn;

		//
		// Evaluate inputs
		//
		{
			if ( InputLayer.Evaluate( "raise" ) )
				Raise();
			if ( InputLayer.Evaluate( "fold" ) )
				Fold();
			if ( InputLayer.Evaluate( "check" ) )
				Check();

			int increment = ((BetMax - BetMin) / 10f).CeilToInt();
			increment = (MathF.Round(increment / 10) * 10).CeilToInt();

			if ( TimeSinceLastBetIncrement > 0.25f )
			{
				if ( InputLayer.Evaluate( "raise_inc" ) )
				{
					BetValue += increment;
					TimeSinceLastBetIncrement = 0;
				}

				if ( InputLayer.Evaluate( "raise_dec" ) )
				{
					BetValue -= increment;
					TimeSinceLastBetIncrement = 0;
				}
			}
			
			if ( InputLayer.Evaluate( "raise_max" ) )
			{
				BetValue = BetMax;
			}

			if ( InputLayer.Evaluate( "raise_min" ) )
			{
				BetValue = BetMin;
			}

			BetValue = BetValue.Clamp(BetMin, BetMax);
			
			if ( BetValue > BetMin && BetValue < BetMax )
				BetValue = MathF.Round(BetValue / 10) * 10;	
		}
	}

	public override void DrawBackground(ref RenderState state)
	{
		base.DrawBackground(ref state);

		if (RadialWheel == null)
			return;

		float t = ( TimeUntilTurnEnds / 30f ) * 360f;
		t = t.UnsignedMod( 360 );

		float radius = 220f * 0.5f * ScaleToScreen;
		float borderWidth = 2f;

		GraphicsX.Circle(RadialWheel.Box.Rect.Center, radius, radius - borderWidth, Color.White, 64, 0, t);
	}
}
